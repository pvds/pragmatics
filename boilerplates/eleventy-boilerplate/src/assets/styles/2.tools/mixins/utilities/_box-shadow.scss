/*  ==========================================================================
    Box shadow
    ========================================================================== */

@mixin box-shadow(
  $level,
  $direction: bottom,
  $focus: false,
  $opacity-boost: $shadow-opacity-boost,
  $shadow-color: $color-shadow,
  $important: null
) {
  @if type-of($level) != number or not unitless($level) {
    @error "$z-value must be a unitless number, but received "#{$level}"";
  }

  @if $level < 0 or $level > 24 {
    @error "$z-value must be between 0 and 24, but received "#{$level}"";
  }

  @if $important {
    $important: !important;
  }

  $inset: null;

  @if ($focus == true or $focus == 'inset') {
    $inset: 'inset';
  }

  $umbra-level: convert-elevation(map-get($shadow-elevation-umbra-map, $level), $direction);
  $penumbra-level: convert-elevation(map-get($shadow-elevation-penumbra-map, $level), $direction);
  $ambient-level: convert-elevation(map-get($shadow-elevation-ambient-map, $level), $direction);

  $umbra-color: rgba($shadow-color, $shadow-elevation-umbra-opacity * $opacity-boost);
  $penumbra-color: rgba($shadow-color, $shadow-elevation-penumbra-opacity * $opacity-boost);
  $ambient-color: rgba($shadow-color, $shadow-elevation-ambient-opacity * $opacity-boost);

  @if ($focus) {
    box-shadow: $inset 0 0 0 1px $color-focus, $umbra-level $umbra-color,
      $penumbra-level $penumbra-color, $ambient-level $ambient-color $important;
  } @else {
    box-shadow: $umbra-level $umbra-color, $penumbra-level $penumbra-color,
      $ambient-level $ambient-color $important;
  }
}
